//class ListNode {
//     int val;
//     ListNode next;
//     ListNode() {}
//     ListNode(int val) { this.val = val; }
//     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
// }

public class Q21 {

    // 迭代法
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {

        // 这里创建一个头节点和一个迭代的前节点 ; 头节点是为了储存链表头并返回head.next ; 而前节点是每次节点交换必须要的操作节点
        ListNode result = new ListNode(0),prev=result;

        while (l1!=null && l2!=null){ // 这里的循环条件是 当 l1 和 l2 都不为空的时候

            // 主要逻辑
            if (l1.val <= l2.val){
                prev.next = l1 ;
                l1 = l1.next;
            }else {
                prev.next = l2 ;
                l2 = l2.next;
            }
            prev = prev.next;
        }
        //  l1 == null 能判定出是哪个链表到尾了
        prev.next = l1 == null ? l2 : l1 ;
        return result.next;
    }

    // 迭代法
    public ListNode mergeTwoLists1(ListNode l1, ListNode l2) {
        if (l1 == null){
            return l2;
        }else if (l2 == null){
            return l1;
        }
        else if (l1.val <= l2.val){
            l1.next = mergeTwoLists1(l1.next,l2);
            return l1;
        }
        else {
            l2.next =  mergeTwoLists1(l1,l2.next);
            return l2 ;
        }
    }
}
