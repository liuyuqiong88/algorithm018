package work08;

/*编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

 

提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 

进阶：

如果多次调用这个函数，你将如何优化你的算法？
 

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-1-bits
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */

public class Q191_number_of_1_bits {

    // 时间复杂度 O(n)
    // 空间复杂度 O(1)
    // 思路 : 遍历 0 -> 31 , 每一位 都和 1 做 & 运算 , 结果为 1 则 bits + 1 ; 同时 bits<<=1;
    //  为什么做 & 运算 ;  因为  1 & 0 = 0 ;  1 &  1 = 1 ; 根据这个去判断某一位是否有值
    public int hammingWeight(int n) {
        int bits = 0;
        int mask = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & mask) != 0) {
                bits++;
            }
            mask <<= 1;
        }
        return bits;

    }


    // 这个方法更巧妙 , 主要依据 是  n & n - 1 能把 最低位的 1 置为 0 ; 这样就可以自动的过滤掉了一些连续的空位的情况
    // 时间复杂度 O(1) , 这个时间复杂度 是 <= 32 的 , 只有在所有位数都为1的时候才是最坏的情况 , 这个算法的速度会比上面的更快一点
    // 空间复杂度 O(n)

    public int hammingweight1(int n ){

        int sum = 0;
        while (n != 0) {
            sum++;
            n &= (n - 1);
        }
        return sum;

    }
}
